# The "auto_ssl" shared dict should be defined with enough storage space to
# hold your certificate data. 1MB of storage holds certificates for
# approximately 100 separate domains.
lua_shared_dict auto_ssl 1m;
# The "auto_ssl_settings" shared dict is used to temporarily store various settings
# like the secret used by the hook server on port 8999. Do not change or
# omit it.
lua_shared_dict auto_ssl_settings 64k;

# A DNS resolver must be defined for OCSP stapling to function.
#
# This example uses Google's DNS server. You may want to use your system's
# default DNS servers, which can be found in /etc/resolv.conf. If your network
# is not IPv6 compatible, you may wish to disable IPv6 results by using the
# "ipv6=off" flag (like "resolver 8.8.8.8 ipv6=off").
resolver 8.8.8.8;

# Initial setup tasks.
init_by_lua_block {
  auto_ssl = (require "resty.auto-ssl").new()

  -- Define a function to determine which SNI domains to automatically handle
  -- and register new certificates for. Defaults to not allowing any domains,
  -- so this must be configured.
  auto_ssl:set("allow_domain", function(domain)
    return true
  end)
  -- auto_ssl:set("allow_domain", function(domain, auto_ssl, ssl_options, renewal)
  --   return ngx.re.match(domain, "(example.com|example.net)$", "ijo")
  -- end)

  auto_ssl:set("ca", "https://acme-staging-v02.api.letsencrypt.org/directory")
  -- auto_ssl:set("ca", "https://acme-v02.api.letsencrypt.org/directory")


  auto_ssl:init()
}

init_worker_by_lua_block {
  auto_ssl:init_worker()
}
